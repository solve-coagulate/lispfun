(define eval-begin
  (lambda (es env)
    (if (= (cdr es) (quote ()))
        (eval2 (car es) env)
        (begin
          (eval2 (car es) env)
          (eval-begin (cdr es) env)))) )

(define eval2
  (lambda (x env)
    (if (symbol? x)
        (env-get env x)
        (if (list? x)
            ((lambda (op args)
               (if (= op (quote quote))
                   (car args)
                   (if (= op (quote if))
                       (eval2 (if (eval2 (car args) env)
                                  (car (cdr args))
                                  (car (cdr (cdr args))))
                              env)
                       (if (= op (quote define))
                           (env-set! env (car args) (eval2 (car (cdr args)) env))
                           (if (= op (quote set!))
                               (env-set! env (car args) (eval2 (car (cdr args)) env))
                               (if (= op (quote lambda))
                                   (make-procedure (car args) (car (cdr args)) env)
                                   (if (= op (quote begin))
                                       (eval-begin args env)
                                       (apply (eval2 op env)
                                              (map (lambda (a) (eval2 a env)) args))))))))
             )
             (car x)
             (cdr x))
            x))))
